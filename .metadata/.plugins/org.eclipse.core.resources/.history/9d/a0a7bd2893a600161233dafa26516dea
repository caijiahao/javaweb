#*************Apriori Algorithm*************
# Zealseeker | www.zealseeker.com          
#*******************************************
#Input:
#   dataDic, database of events as a dict
#       -----------------
#       |TID    ItemID  |
#       |T100   I1,I2,I5|
#       |...    ...     |
#       -----------------
#   min_sup, minimize support threshold
#Output:
#   UkLk, set of frequent(large) itemsets,
#*******************************************

import itertools

class Apriori:
    def __init__(self,min_sup=0.2,dataDic={}):
        self.data = dataDic
        self.size = len(dataDic)
        self.min_sup = min_sup
        self.min_sup_val = min_sup * self.size
        
    def find_frequent_1_itemsets(self):
        FreqDic = {} #{itemset1:freq1,itemsets2:freq2}
        for event in self.data:
            for item in self.data[event]:
                if item in FreqDic:
                    FreqDic[item] += 1
                else:
                    FreqDic[item] = 1
        L1 = []
        for itemset in FreqDic:
            if itemset >= self.min_sup_val:
                L1.append([itemset])
        return L1
    
    def has_infrequent_subset(self,c,L_last,k):
        